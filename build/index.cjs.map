{"version":3,"file":"index.cjs","sources":["../src/lib/timestamp.ts","../src/lib/substitute.ts","../src/data/languageSubstitutions.ts","../src/lib/substituteLanguage.ts","../src/lib/smartTruncate.ts","../src/index.ts"],"sourcesContent":["export function timestamp(): string {\n  return Math.floor(Date.now() / 1000).toString();\n}\n","import type { Substitution } from '../@types/index.js';\n\ntype SlugifyOptions = {\n  str: string\n  substitutions: Substitution;\n}\n\nexport function substitute({ str, substitutions }: SlugifyOptions): string {\n  let result = str;\n  const keys = Object.keys(substitutions).sort();\n\n  for (const key of keys) {\n    const regex = new RegExp(key, 'g');\n\n    result = result.replace(regex, substitutions[key]);\n  }\n\n  return result;\n}\n","import type { Substitution } from '../@types/index.js';\n\nexport const defaultCharSub: Substitution = {\n  '\"': \"\",\n  '\\'': \"\",\n  '’': \"\",\n  '‒': \"-\",\n  '–': \"-\",\n  '—': \"-\",\n  '―': \"-\",\n};\n\n// English\nexport const enCharSub: Substitution = {\n  '&': \"and\",\n  '@': \"at\",\n};\n\n// German\nexport const deCharSub: Substitution = {\n  '&': \"und\",\n  '@': \"an\",\n  'ä': \"ae\",\n  'Ä': \"Ae\",\n  'ö': \"oe\",\n  'Ö': \"Oe\",\n  'ü': \"ue\",\n  'Ü': \"Ue\",\n  'ß': \"ss\",\n};\n\n// Turkish\nexport const trCharSub: Substitution = {\n  '&': \"ve\",\n  '@': \"et\",\n  'Ç': \"C\",\n  'Ö': \"O\",\n  'Ü': \"U\",\n  'ç': \"c\",\n  'ö': \"o\",\n  'ü': \"u\",\n  'Ğ': \"G\",\n  'ğ': \"g\",\n  'İ': \"I\",\n  'ı': \"i\",\n  'Ş': \"S\",\n  'ş': \"s\",\n};\n\n\n","import { substitute } from './substitute.js';\nimport { deCharSub, defaultCharSub, enCharSub, trCharSub } from '../data/languageSubstitutions.js';\nimport type { SubstituteLanguageOptions } from '../@types/index.js';\n\nexport function substituteLanguage({ str, language = \"en\" }: SubstituteLanguageOptions): string {\n  switch (language) {\n    case \"de\":\n    case \"deu\":\n      return substitute({ str, substitutions: { ...deCharSub, ...defaultCharSub } });\n    case \"en\":\n    case \"eng\":\n      return substitute({ str, substitutions: { ...defaultCharSub, ...enCharSub } });\n    case \"tr\":\n    case \"tur\":\n      return substitute({ str, substitutions: { ...defaultCharSub, ...trCharSub } });\n    default:\n      return substitute({ str, substitutions: { ...defaultCharSub, ...enCharSub } });\n  }\n}\n","export function smartTruncate(str: string, maxLength: number): string {\n  // If the string length is already within the maxLength, no truncation is needed\n  if (str.length <= maxLength) {\n    return str;\n  }\n\n  // Look for the last space or dash within the maxLength to break at a natural point\n  for (let i = maxLength; i >= 0; i--) {\n    if (str[i] === ' ' || str[i] === '-') {\n      // Return the substring ending at the last natural break\n      return str.substring(0, i);\n    }\n  }\n\n  // If no natural break is found, return the string truncated at maxLength\n  return str.substring(0, maxLength);\n}\n","import { timestamp } from './lib/timestamp.js';\nimport { substitute } from './lib/substitute.js';\nimport { substituteLanguage } from './lib/substituteLanguage.js';\nimport type { SlugifyOptions } from './@types/index.js';\nimport unidecode from 'unidecode';\nimport { smartTruncate } from './lib/smartTruncate.js';\n\nconst defaultOptions: SlugifyOptions = {\n  customSubstitutions: {},\n  charSubstitutions: {},\n  maxLength: 0,\n  enableSmartTruncate: true,\n  lowercase: true,\n  appendTimestamp: false,\n};\n\nfunction slugify(slug: string, params?: SlugifyOptions): string {\n  const {\n    appendTimestamp,\n    charSubstitutions,\n    customSubstitutions,\n    language = \"en\",\n    enableSmartTruncate,\n    lowercase,\n    maxLength = 0\n  } = { ...defaultOptions, ...params };\n\n  // Trim\n  slug = slug.trim();\n\n  // Apply custom substitutions\n  if (customSubstitutions) {\n    slug = substitute({ str: slug, substitutions: customSubstitutions });\n  }\n\n  // Apply character substitutions\n  if (charSubstitutions) {\n    slug = substitute({ str: slug, substitutions: charSubstitutions });\n  }\n\n  // Apply language substitutions\n  slug = substituteLanguage({ str: slug, language });\n\n  // Unidecode\n  slug = unidecode(slug);\n\n  // Lowercase\n  if (lowercase) {\n    slug = slug.toLowerCase();\n  }\n\n  // Simple truncate\n  if (!enableSmartTruncate && maxLength > 0 && slug.length > maxLength) {\n    slug = slug.substring(0, maxLength);\n  }\n\n  // Regex patterns for unwanted characters and multiple dashes\n  const regexpNonAuthorizedChars = /[^a-zA-Z0-9-_]/g;\n  const regexpMultipleDashes = /-+/g;\n\n  // Remove non-authorized characters and replace multiple dashes\n  slug = slug.replace(regexpNonAuthorizedChars, \"-\");\n  slug = slug.replace(regexpMultipleDashes, \"-\");\n\n  // Remove leading/trailing dashes\n  slug = slug.replace(/^[-_]+|[-_]+$/g, \"\");\n\n  // Smart truncate\n  if (enableSmartTruncate && maxLength > 0) {\n    slug = smartTruncate(slug, maxLength);\n  }\n\n  // Add timestamp\n  if (appendTimestamp) {\n    slug = `${slug}-${timestamp()}`;\n  }\n\n  return slug;\n}\n\nexport default slugify;\n"],"names":[],"mappings":";;;;AAAO,SAAS,SAAoB,GAAA;AAClC,EAAA,OAAO,KAAK,KAAM,CAAA,IAAA,CAAK,KAAQ,GAAA,GAAI,EAAE,QAAS,EAAA,CAAA;AAChD;;ACKO,SAAS,UAAW,CAAA,EAAE,GAAK,EAAA,aAAA,EAAyC,EAAA;AACzE,EAAA,IAAI,MAAS,GAAA,GAAA,CAAA;AACb,EAAA,MAAM,IAAO,GAAA,MAAA,CAAO,IAAK,CAAA,aAAa,EAAE,IAAK,EAAA,CAAA;AAE7C,EAAA,KAAA,MAAW,OAAO,IAAM,EAAA;AACtB,IAAA,MAAM,KAAQ,GAAA,IAAI,MAAO,CAAA,GAAA,EAAK,GAAG,CAAA,CAAA;AAEjC,IAAA,MAAA,GAAS,MAAO,CAAA,OAAA,CAAQ,KAAO,EAAA,aAAA,CAAc,GAAG,CAAC,CAAA,CAAA;AAAA,GACnD;AAEA,EAAO,OAAA,MAAA,CAAA;AACT;;AChBO,MAAM,cAA+B,GAAA;AAAA,EAC1C,GAAK,EAAA,EAAA;AAAA,EACL,GAAM,EAAA,EAAA;AAAA,EACN,QAAK,EAAA,EAAA;AAAA,EACL,QAAK,EAAA,GAAA;AAAA,EACL,QAAK,EAAA,GAAA;AAAA,EACL,QAAK,EAAA,GAAA;AAAA,EACL,QAAK,EAAA,GAAA;AACP,CAAA,CAAA;AAGO,MAAM,SAA0B,GAAA;AAAA,EACrC,GAAK,EAAA,KAAA;AAAA,EACL,GAAK,EAAA,IAAA;AACP,CAAA,CAAA;AAGO,MAAM,SAA0B,GAAA;AAAA,EACrC,GAAK,EAAA,KAAA;AAAA,EACL,GAAK,EAAA,IAAA;AAAA,EACL,MAAK,EAAA,IAAA;AAAA,EACL,MAAK,EAAA,IAAA;AAAA,EACL,MAAK,EAAA,IAAA;AAAA,EACL,MAAK,EAAA,IAAA;AAAA,EACL,MAAK,EAAA,IAAA;AAAA,EACL,MAAK,EAAA,IAAA;AAAA,EACL,MAAK,EAAA,IAAA;AACP,CAAA,CAAA;AAGO,MAAM,SAA0B,GAAA;AAAA,EACrC,GAAK,EAAA,IAAA;AAAA,EACL,GAAK,EAAA,IAAA;AAAA,EACL,MAAK,EAAA,GAAA;AAAA,EACL,MAAK,EAAA,GAAA;AAAA,EACL,MAAK,EAAA,GAAA;AAAA,EACL,MAAK,EAAA,GAAA;AAAA,EACL,MAAK,EAAA,GAAA;AAAA,EACL,MAAK,EAAA,GAAA;AAAA,EACL,QAAK,EAAA,GAAA;AAAA,EACL,QAAK,EAAA,GAAA;AAAA,EACL,QAAK,EAAA,GAAA;AAAA,EACL,QAAK,EAAA,GAAA;AAAA,EACL,QAAK,EAAA,GAAA;AAAA,EACL,QAAK,EAAA,GAAA;AACP,CAAA;;AC3CO,SAAS,kBAAmB,CAAA,EAAE,GAAK,EAAA,QAAA,GAAW,MAA2C,EAAA;AAC9F,EAAA,QAAQ,QAAU;AAAA,IAChB,KAAK,IAAA,CAAA;AAAA,IACL,KAAK,KAAA;AACH,MAAO,OAAA,UAAA,CAAW,EAAE,GAAA,EAAK,aAAe,EAAA,EAAE,GAAG,SAAW,EAAA,GAAG,cAAe,EAAA,EAAG,CAAA,CAAA;AAAA,IAC/E,KAAK,IAAA,CAAA;AAAA,IACL,KAAK,KAAA;AACH,MAAO,OAAA,UAAA,CAAW,EAAE,GAAA,EAAK,aAAe,EAAA,EAAE,GAAG,cAAgB,EAAA,GAAG,SAAU,EAAA,EAAG,CAAA,CAAA;AAAA,IAC/E,KAAK,IAAA,CAAA;AAAA,IACL,KAAK,KAAA;AACH,MAAO,OAAA,UAAA,CAAW,EAAE,GAAA,EAAK,aAAe,EAAA,EAAE,GAAG,cAAgB,EAAA,GAAG,SAAU,EAAA,EAAG,CAAA,CAAA;AAAA,IAC/E;AACE,MAAO,OAAA,UAAA,CAAW,EAAE,GAAA,EAAK,aAAe,EAAA,EAAE,GAAG,cAAgB,EAAA,GAAG,SAAU,EAAA,EAAG,CAAA,CAAA;AAAA,GACjF;AACF;;AClBgB,SAAA,aAAA,CAAc,KAAa,SAA2B,EAAA;AAEpE,EAAI,IAAA,GAAA,CAAI,UAAU,SAAW,EAAA;AAC3B,IAAO,OAAA,GAAA,CAAA;AAAA,GACT;AAGA,EAAA,KAAA,IAAS,CAAI,GAAA,SAAA,EAAW,CAAK,IAAA,CAAA,EAAG,CAAK,EAAA,EAAA;AACnC,IAAA,IAAI,IAAI,CAAC,CAAA,KAAM,OAAO,GAAI,CAAA,CAAC,MAAM,GAAK,EAAA;AAEpC,MAAO,OAAA,GAAA,CAAI,SAAU,CAAA,CAAA,EAAG,CAAC,CAAA,CAAA;AAAA,KAC3B;AAAA,GACF;AAGA,EAAO,OAAA,GAAA,CAAI,SAAU,CAAA,CAAA,EAAG,SAAS,CAAA,CAAA;AACnC;;ACTA,MAAM,cAAiC,GAAA;AAAA,EACrC,qBAAqB,EAAC;AAAA,EACtB,mBAAmB,EAAC;AAAA,EACpB,SAAW,EAAA,CAAA;AAAA,EACX,mBAAqB,EAAA,IAAA;AAAA,EACrB,SAAW,EAAA,IAAA;AAAA,EACX,eAAiB,EAAA,KAAA;AACnB,CAAA,CAAA;AAEA,SAAS,OAAA,CAAQ,MAAc,MAAiC,EAAA;AAC9D,EAAM,MAAA;AAAA,IACJ,eAAA;AAAA,IACA,iBAAA;AAAA,IACA,mBAAA;AAAA,IACA,QAAW,GAAA,IAAA;AAAA,IACX,mBAAA;AAAA,IACA,SAAA;AAAA,IACA,SAAY,GAAA,CAAA;AAAA,GACV,GAAA,EAAE,GAAG,cAAA,EAAgB,GAAG,MAAO,EAAA,CAAA;AAGnC,EAAA,IAAA,GAAO,KAAK,IAAK,EAAA,CAAA;AAGjB,EAAA,IAAI,mBAAqB,EAAA;AACvB,IAAA,IAAA,GAAO,WAAW,EAAE,GAAA,EAAK,IAAM,EAAA,aAAA,EAAe,qBAAqB,CAAA,CAAA;AAAA,GACrE;AAGA,EAAA,IAAI,iBAAmB,EAAA;AACrB,IAAA,IAAA,GAAO,WAAW,EAAE,GAAA,EAAK,IAAM,EAAA,aAAA,EAAe,mBAAmB,CAAA,CAAA;AAAA,GACnE;AAGA,EAAA,IAAA,GAAO,kBAAmB,CAAA,EAAE,GAAK,EAAA,IAAA,EAAM,UAAU,CAAA,CAAA;AAGjD,EAAA,IAAA,GAAO,UAAU,IAAI,CAAA,CAAA;AAGrB,EAAA,IAAI,SAAW,EAAA;AACb,IAAA,IAAA,GAAO,KAAK,WAAY,EAAA,CAAA;AAAA,GAC1B;AAGA,EAAA,IAAI,CAAC,mBAAuB,IAAA,SAAA,GAAY,CAAK,IAAA,IAAA,CAAK,SAAS,SAAW,EAAA;AACpE,IAAO,IAAA,GAAA,IAAA,CAAK,SAAU,CAAA,CAAA,EAAG,SAAS,CAAA,CAAA;AAAA,GACpC;AAGA,EAAA,MAAM,wBAA2B,GAAA,iBAAA,CAAA;AACjC,EAAA,MAAM,oBAAuB,GAAA,KAAA,CAAA;AAG7B,EAAO,IAAA,GAAA,IAAA,CAAK,OAAQ,CAAA,wBAAA,EAA0B,GAAG,CAAA,CAAA;AACjD,EAAO,IAAA,GAAA,IAAA,CAAK,OAAQ,CAAA,oBAAA,EAAsB,GAAG,CAAA,CAAA;AAG7C,EAAO,IAAA,GAAA,IAAA,CAAK,OAAQ,CAAA,gBAAA,EAAkB,EAAE,CAAA,CAAA;AAGxC,EAAI,IAAA,mBAAA,IAAuB,YAAY,CAAG,EAAA;AACxC,IAAO,IAAA,GAAA,aAAA,CAAc,MAAM,SAAS,CAAA,CAAA;AAAA,GACtC;AAGA,EAAA,IAAI,eAAiB,EAAA;AACnB,IAAA,IAAA,GAAO,CAAG,EAAA,IAAI,CAAI,CAAA,EAAA,SAAA,EAAW,CAAA,CAAA,CAAA;AAAA,GAC/B;AAEA,EAAO,OAAA,IAAA,CAAA;AACT;;;;"}